#!/bin/bash

# Comma separated paths to files to check, absolute or relative to working directory
PATHS=${PATHS:=src}


########## PHP COPY/PASTE DETECTOR CONFIGURATION ##########
# Whether or not to run php copy/paste detector, will run if phpcpd binary is found
PHPCPD_ENABLED=${PHPCPD_ENABLED:=true}
# The minimum number of lines which need to be duplicated to count as copy/paste
PHPCPD_MIN_LINES=${PHPCPD_MIN_LINES:=5}
# The minimum number of duplicated tokens within a line to count as copy/paste
PHPCPD_MIN_TOKENS=${PHPCPD_MIN_TOKENS:=70}


########## PHP MESS DETECTOR CONFIGURATION ##########
# Whether or not to run php mess destector, will run if phpmd binary is found
PHPMD_ENABLED=${PHPMD_ENABLED:=true}
# The rulesets to use to determine issues, will be ignored if phpmd.xml exists
PHPMD_RULESETS=${PHPMD_RULESETS:=vendor/agilekeys/code-standards/phpmd.xml}


########## PHP CODE SNIFFER CONFIGURATION ##########
# Whether or not to run php code sniffer, will run if phpcs binary is found
PHPCS_ENABLED=${PHPCS_ENABLED:=true}
# The standards to compare code against, will be ignored if phpcs.xml exists
PHPCS_STANDARDS=${PHPCS_STANDARDS:=vendor/agilekeys/code-standards/phpcs.xml}
# Whether to show the code sniffs name on report output
PHPCS_SHOW_SNIFF_NAME=${PHPCS_SHOW_SNIFF_NAME:=true}


########## PHPUNIT CONFIGURATION ##########
# Whether or not to run phpunit, will run if paratest or phpunit binary is found
PHPUNIT_ENABLED=${PHPUNIT_ENABLED:=true}
# Whether or not to enable code coverage checks
PHPUNIT_ENABLE_CODE_COVERAGE=${PHPUNIT_ENABLE_CODE_COVERAGE:=true}
# The minimum percentage of coverage to have, will be ignored if coverage check is disabled
PHPUNIT_COVERAGE_MINIMUM_LEVEL=${PHPUNIT_COVERAGE_MINIMUM_LEVEL:=90}
# The path to output junit parseable log file, can be relative, will be ignored if left blank
PHPUNIT_JUNIT_LOG_PATH=${PHPUNIT_JUNIT_LOG_PATH:=}
# The directory containing tests, will be ignored it phpunit.xml exists in working directory
PHPUNIT_TEST_DIRECTORY=${PHPUNIT_TEST_DIRECTORY:=tests/Unit}